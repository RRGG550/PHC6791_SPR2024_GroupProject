color = "darkgrey",
group = "Bus Stops") %>% #Bus Stops
addLayersControl(overlayGroups = c("Shelters","Stores","Bus Routes","Bus Stops"), position = "topleft", options = layersControlOptions(collapsed = F)) #Filter
library(tidyverse)
library(tidygeocoder)
library(sf)
#library(rnaturalearth)
#library(rnaturalearthdata)
library(maps)
library(leaflet) #Interactive Map Plotting
#install.packages("leaflegend")
library(leaflegend)
library(osrm) #Routing
markets <-read.csv("data/SNAP Retailer Location data.csv")
str(markets)
markets$Store.Type <- as.factor(markets$Store.Type)
levels(markets$Store.Type)
markets.sf <- st_as_sf(markets, coords = c("Longitude", "Latitude"))
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters.GV <- shelters %>%
filter(CoC == "Gainesville/Alachua, Putnam Counties CoC") #Filter Gainesville/Alachua, Putnam Counties
unique(shelters.GV$Organization.Name)  # How many Shelters?
shelters.GV <- shelters.GV %>%
distinct(Organization.Name, .keep_all = T) #Remove duplicate names.
#Add Data
shelters.GV[1,16] <- ""
shelters.GV[1,17] <- "" #Add city
shelters.GV[3,16] <- "926 St. Johns Ave"
shelters.GV[3,17] <- "Palatka"
shelters.GV[4,16] <- "2100 NW 53rd Ave"
shelters.GV[4,17] <- "Gainesville"
shelters.GV <- shelters.GV %>%
mutate(address = paste(address1, city, state, zip, sep = ","))
geo.shelters <- shelters.GV %>%
geocode(address = address, method = "osm")
geo.shelters.sf <- st_as_sf(geo.shelters, coords = c("long", 'lat'), na.fail = F)
write_csv(geo.shelters.sf, "geo.shelters.csv", row.names = F)
write_csv(geo.shelters.sf, "geo.shelters.csv")
read.csv("geo.shelters.csv")
View(geo.shelters)
shelters.GV[12,16] <- "1405 NW 13th St"
View(geo.shelters)
View(shelters.GV)
shelters.GV[5,16] <- "1810 NW 6th St"
View(shelters.GV)
shelters.GV[15,16] <- "2130 NW 31st Ave"
View(shelters.GV)
shelters.GV <- shelters.GV %>%
mutate(address = paste(address1, city, state, zip, sep = ","))
View(shelters.GV)
#Add Data
shelters.GV[-c(1)]
#Add Data
shelters.GV[-c(1),]
#Add Data
shelters.GV[,-c(1)]
#Add Data
shelters.GV <- shelters.GV[,-c(1)]
View(shelters.GV)
#Add Data
shelters.GV <- shelters.GV[,-c(1)]
View(shelters.GV)
#Add Data
shelters.GV <- shelters.GV[-c(1),]
View(shelters.GV)
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters.GV <- shelters %>%
filter(CoC == "Gainesville/Alachua, Putnam Counties CoC") #Filter Gainesville/Alachua, Putnam Counties
unique(shelters.GV$Organization.Name)  # How many Shelters?
shelters.GV <- shelters.GV %>%
distinct(Organization.Name, .keep_all = T) #Remove duplicate names.
#Add Data
shelters.GV <- shelters.GV[-c(1),]
View(shelters.GV)
shelters.GV[3,16] <- "926 St. Johns Ave"
shelters.GV[3,17] <- "Palatka"
shelters.GV[4,16] <- "2100 NW 53rd Ave"
shelters.GV[4,17] <- "Gainesville"
shelters.GV[5,16] <- "1810 NW 6th St"
shelters.GV[12,16] <- "1405 NW 13th St"
shelters.GV[15,16] <- "2130 NW 31st Ave"
shelters.GV <- shelters.GV %>%
mutate(address = paste(address1, city, state, zip, sep = ","))
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters.GV <- shelters %>%
filter(CoC == "Gainesville/Alachua, Putnam Counties CoC") #Filter Gainesville/Alachua, Putnam Counties
unique(shelters.GV$Organization.Name)  # How many Shelters?
shelters.GV <- shelters.GV %>%
distinct(Organization.Name, .keep_all = T) #Remove duplicate names.
#Add Data
shelters.GV <- shelters.GV[-c(1),]
#Add Data
shelters.GV <- shelters.GV[-c(1),]
View(shelters.GV)
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters.GV <- shelters %>%
filter(CoC == "Gainesville/Alachua, Putnam Counties CoC") #Filter Gainesville/Alachua, Putnam Counties
unique(shelters.GV$Organization.Name)  # How many Shelters?
shelters.GV <- shelters.GV %>%
distinct(Organization.Name, .keep_all = T) #Remove duplicate names.
#Add Data
shelters.GV <- shelters.GV[-c(1),]
View(shelters.GV)
shelters.GV[3,16] <- "926 St. Johns Ave"
shelters.GV[3,17] <- "Palatka"
View(shelters.GV)
shelters.GV[2,16] <- "926 St. Johns Ave"
shelters.GV[2,17] <- "Palatka"
shelters.GV[3,16] <- "2100 NW 53rd Ave"
shelters.GV[3,17] <- "Gainesville"
View(shelters.GV)
shelters.GV[4,16] <- "1810 NW 6th St"
shelters.GV[11,16] <- "1405 NW 13th St"
shelters.GV[14,16] <- "2130 NW 31st Ave"
View(shelters.GV)
shelters.GV <- shelters.GV %>%
mutate(address = paste(address1, city, state, zip, sep = ","))
geo.shelters <- shelters.GV %>%
geocode(address = address, method = "osm")
geo.shelters.sf <- st_as_sf(geo.shelters, coords = c("long", 'lat'), na.fail = F)
View(geo.shelters.sf)
write_csv(geo.shelters.sf, "geo.shelters.csv")
read_csv("geo.shelters.csv")
write_csv(geo.shelters.sf, "data\geo.shelters.csv")
write_csv(geo.shelters.sf, "data/geo.shelters.csv")
leaflet(geo.shelters.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(data = geo.shelters.sf, popup = geo.shelters.sf$Organization.Name)
bus.stops <- read_sf("data/RTSBusStops_Spring2024", layer = "RTSBusStops_Fall2023")
bus.stops
bus.stops <- bus.stops %>%
filter(!OBJECTID == "0")
bus.routes <- st_read("data/RTSBusRoutes_Spring2024") %>%
st_transform('+proj=longlat +datum=WGS84')
library(fontawesome)
markets.sf <- markets.sf %>%
mutate(Icons = case_when(
Store.Type == "Supermarket" ~ "Supermarket",
Store.Type == "Convenience Store" ~ "ConvenienceStore",
Store.Type == "Farmers and Markets" ~ "FarmersMarket",
Store.Type == "Grocery Store" ~ "Grocery",
Store.Type == "Super Store" ~ "SuperStore",
Store.Type == "Specialty Store" ~ "Specialty",
Store.Type == "Other" ~ "Other"
))
markets.sf$Icons <- as.factor(markets.sf$Icons)
levels(markets.sf$Icons)
store.icons <- awesomeIconList(
Supermarket = makeAwesomeIcon(
icon = "shopping-cart",
markerColor = "lightred",
library= "fa"
),
ConvenienceStore = makeAwesomeIcon(
icon = "pizza",
iconColor = "black",
markerColor = "blue",
library = "ion"
),
FarmersMarket = makeAwesomeIcon(
icon = "group",
markerColor = "green",
library = "fa"
),
Grocery = makeAwesomeIcon(
icon = "shopping-basket",
markerColor = "pink",
library = "fa"
),
SuperStore = makeAwesomeIcon(
icon = "cubes",
markerColor = "purple",
library = "fa"
),
Specialty = makeAwesomeIcon(
icon = "info",
markerColor = "lightgray",
library = "fa"
),
Other = makeAwesomeIcon(
icon = "asterisk",
markerColor = "orange",
library = "fa"
)
)
shelter.icon <- makeAwesomeIcon(
icon = "home",
iconColor = "black",
markerColor = "red",
library = "fa"
)
bus.route.colors <- colorFactor(c("#0D479C",
"#10D3DE",
"#04109A",
"#83D5FD",
"#7F1F4A",
"#6FE329",
"#50CBE7",
"#5A19A6",
"#641D60",
"#3529D6",
"#EF6DD0",
"#7A54BE",
"#B01ECC",
"#F2A5FA",
"#4BCE4A",
"#84F22B",
"#8B618C",
"#48C880",
"#5C4DAE",
"#AE0C0D",
"#FC0AF2",
"#4973A4",
"#B5EFC3",
"#749B5D",
"#03A747"), bus.routes$route_id)
leaflet(markets.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(icon = ~store.icons[Icons],
label = ~as.character(Store.Name, Store.Type),
group = "Stores") %>% #EBT/SNAP Markets
addLegendAwesomeIcon(iconSet = store.icons,
title = "Store Types",
position = "topright",
group = "Stores") %>%
addAwesomeMarkers(data = geo.shelters.sf,
popup = paste0(
"<b>Organization: </b>",
geo.shelters.sf$Organization.Name,
"<br>",
"<b>Address: </b>",
geo.shelters.sf$address1
),
icon = shelter.icon, group = "Shelters") %>% #Shelters
addPolylines(data = bus.routes,
opacity = 1,
popup = paste0(
"<b>Route: </b>",
bus.routes$shape_id,
"<br>",
"<b>Line: </b>",
bus.routes$route_long
),
label = bus.routes$route_id,
weight = 3,
group = "Bus Routes", color = ~bus.route.colors(route_id)) %>%  #Bus Routes
addLegendFactor(pal = bus.route.colors, values = bus.routes$route_id, group = "Bus Routes", position = "bottomleft" , orientation = "horizontal") %>% #Legend for Bus Routes
addCircleMarkers(lng = bus.stops$LONGITUDE,
lat = bus.stops$LATITUDE,
popup = paste0(
"<b>Stop: </b>",
bus.stops$STOP_NAME,
"<br>",
"<b>Line: </b>",
bus.stops$DESCRIPTIO
),
radius = 4,
opacity = 1,
stroke = F,
fillOpacity = 1,
color = "darkgrey",
group = "Bus Stops") %>% #Bus Stops
addLayersControl(overlayGroups = c("Shelters","Stores","Bus Routes","Bus Stops"), position = "topleft", options = layersControlOptions(collapsed = F)) #Filter
leaflet(markets.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(icon = ~store.icons[Icons],
label = ~as.character(Store.Name, Store.Type),
group = "Stores") %>% #EBT/SNAP Markets
addLegendAwesomeIcon(iconSet = store.icons,
title = "Store Types",
position = "topright",
group = "Stores") %>%
addAwesomeMarkers(data = geo.shelters.sf,
popup = paste0(
"<b>Organization: </b>",
geo.shelters.sf$Organization.Name,
"<br>",
"<b>Address: </b>",
geo.shelters.sf$address1
),
icon = shelter.icon, group = "Shelters") %>% #Shelters
addPolylines(data = bus.routes,
opacity = 1,
popup = paste0(
"<b>Route: </b>",
bus.routes$shape_id,
"<br>",
"<b>Line: </b>",
bus.routes$route_long
),
label = bus.routes$route_id,
weight = 3,
group = "Bus Routes", color = ~bus.route.colors(route_id)) %>%  #Bus Routes
#addLegendFactor(pal = bus.route.colors, values = bus.routes$route_id, group = "Bus Routes", position = "bottomleft" , orientation = "horizontal") %>% #Legend for Bus Routes
addCircleMarkers(lng = bus.stops$LONGITUDE,
lat = bus.stops$LATITUDE,
popup = paste0(
"<b>Stop: </b>",
bus.stops$STOP_NAME,
"<br>",
"<b>Line: </b>",
bus.stops$DESCRIPTIO
),
radius = 4,
opacity = 1,
stroke = F,
fillOpacity = 1,
color = "darkgrey",
group = "Bus Stops") %>% #Bus Stops
addLayersControl(overlayGroups = c("Shelters","Stores","Bus Routes","Bus Stops"), position = "topleft", options = layersControlOptions(collapsed = F)) #Filter
library(tidyverse)
library(tidygeocoder)
library(sf)
#library(rnaturalearth)
#library(rnaturalearthdata)
library(maps)
library(leaflet) #Interactive Map Plotting
#install.packages("leaflegend")
library(leaflegend)
library(osrm) #Routing
markets <-read.csv("data/SNAP Retailer Location data.csv")
str(markets)
markets$Store.Type <- as.factor(markets$Store.Type)
levels(markets$Store.Type)
markets.sf <- st_as_sf(markets, coords = c("Longitude", "Latitude"))
shelters <- read.csv("data/FL508_CoC_Addresses.csv")
shelters.GV <- shelters %>%
filter(CoC == "Gainesville/Alachua, Putnam Counties CoC") #Filter Gainesville/Alachua, Putnam Counties
unique(shelters.GV$Organization.Name)  # How many Shelters?
shelters.GV <- shelters.GV %>%
distinct(Organization.Name, .keep_all = T) #Remove duplicate names.
#Add Data
shelters.GV <- shelters.GV[-c(1),]
shelters.GV[2,16] <- "926 St. Johns Ave"
shelters.GV[2,17] <- "Palatka"
shelters.GV[3,16] <- "2100 NW 53rd Ave"
shelters.GV[3,17] <- "Gainesville"
shelters.GV[4,16] <- "1810 NW 6th St"
shelters.GV[11,16] <- "1405 NW 13th St"
shelters.GV[14,16] <- "2130 NW 31st Ave"
shelters.GV <- shelters.GV %>%
mutate(address = paste(address1, city, state, zip, sep = ","))
read_csv("data/geo.shelters.csv")
geo.shelters.sf <- read_csv("data/geo.shelters.csv")
geo.shelters.sf <- read_sf("data/geo.shelters.csv")
View(geo.shelters.sf)
leaflet(geo.shelters.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(data = geo.shelters.sf, popup = geo.shelters.sf$Organization.Name)
geo.shelters <- shelters.GV %>%
geocode(address = address, method = "osm")
geo.shelters.sf <- st_as_sf(geo.shelters, coords = c("long", 'lat'), na.fail = F)
leaflet(geo.shelters.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(data = geo.shelters.sf, popup = geo.shelters.sf$Organization.Name)
bus.stops <- read_sf("data/RTSBusStops_Spring2024", layer = "RTSBusStops_Fall2023")
bus.stops
bus.stops <- bus.stops %>%
filter(!OBJECTID == "0")
bus.routes <- st_read("data/RTSBusRoutes_Spring2024") %>%
st_transform('+proj=longlat +datum=WGS84')
library(fontawesome)
markets.sf <- markets.sf %>%
mutate(Icons = case_when(
Store.Type == "Supermarket" ~ "Supermarket",
Store.Type == "Convenience Store" ~ "ConvenienceStore",
Store.Type == "Farmers and Markets" ~ "FarmersMarket",
Store.Type == "Grocery Store" ~ "Grocery",
Store.Type == "Super Store" ~ "SuperStore",
Store.Type == "Specialty Store" ~ "Specialty",
Store.Type == "Other" ~ "Other"
))
markets.sf$Icons <- as.factor(markets.sf$Icons)
levels(markets.sf$Icons)
store.icons <- awesomeIconList(
Supermarket = makeAwesomeIcon(
icon = "shopping-cart",
markerColor = "lightred",
library= "fa"
),
ConvenienceStore = makeAwesomeIcon(
icon = "pizza",
iconColor = "black",
markerColor = "blue",
library = "ion"
),
FarmersMarket = makeAwesomeIcon(
icon = "group",
markerColor = "green",
library = "fa"
),
Grocery = makeAwesomeIcon(
icon = "shopping-basket",
markerColor = "pink",
library = "fa"
),
SuperStore = makeAwesomeIcon(
icon = "cubes",
markerColor = "purple",
library = "fa"
),
Specialty = makeAwesomeIcon(
icon = "info",
markerColor = "lightgray",
library = "fa"
),
Other = makeAwesomeIcon(
icon = "asterisk",
markerColor = "orange",
library = "fa"
)
)
shelter.icon <- makeAwesomeIcon(
icon = "home",
iconColor = "black",
markerColor = "red",
library = "fa"
)
bus.route.colors <- colorFactor(c("#0D479C",
"#10D3DE",
"#04109A",
"#83D5FD",
"#7F1F4A",
"#6FE329",
"#50CBE7",
"#5A19A6",
"#641D60",
"#3529D6",
"#EF6DD0",
"#7A54BE",
"#B01ECC",
"#F2A5FA",
"#4BCE4A",
"#84F22B",
"#8B618C",
"#48C880",
"#5C4DAE",
"#AE0C0D",
"#FC0AF2",
"#4973A4",
"#B5EFC3",
"#749B5D",
"#03A747"), bus.routes$route_id)
leaflet(markets.sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addAwesomeMarkers(icon = ~store.icons[Icons],
label = ~as.character(Store.Name, Store.Type),
group = "Stores") %>% #EBT/SNAP Markets
addLegendAwesomeIcon(iconSet = store.icons,
title = "Store Types",
position = "topright",
group = "Stores") %>%
addAwesomeMarkers(data = geo.shelters.sf,
popup = paste0(
"<b>Organization: </b>",
geo.shelters.sf$Organization.Name,
"<br>",
"<b>Address: </b>",
geo.shelters.sf$address1
),
icon = shelter.icon, group = "Shelters") %>% #Shelters
addPolylines(data = bus.routes,
opacity = 1,
popup = paste0(
"<b>Route: </b>",
bus.routes$shape_id,
"<br>",
"<b>Line: </b>",
bus.routes$route_long
),
label = bus.routes$route_id,
weight = 3,
group = "Bus Routes", color = ~bus.route.colors(route_id)) %>%  #Bus Routes
#addLegendFactor(pal = bus.route.colors, values = bus.routes$route_id, group = "Bus Routes", position = "bottomleft" , orientation = "horizontal") %>% #Legend for Bus Routes
addCircleMarkers(lng = bus.stops$LONGITUDE,
lat = bus.stops$LATITUDE,
popup = paste0(
"<b>Stop: </b>",
bus.stops$STOP_NAME,
"<br>",
"<b>Line: </b>",
bus.stops$DESCRIPTIO
),
radius = 4,
opacity = 1,
stroke = F,
fillOpacity = 1,
color = "darkgrey",
group = "Bus Stops") %>% #Bus Stops
addLayersControl(overlayGroups = c("Shelters","Stores","Bus Routes","Bus Stops"), position = "topleft", options = layersControlOptions(collapsed = F)) #Filter
View(markets.sf)
markets.sf %>%
```
View(geo.shelters.sf)
GRACE <- geo.shelters.sf %>%
filter(Organization.Name == "Alachua County Coalition for the Homeless and Hungry") %>%
select(geometry)
?osrmRoute
walmart3877 <- markets.sf %>%
filter(Store.Name == "Walmart Supercenter 3877") %>%
select(geometry)
View(walmart3877)
#Create Dataframe of Coordinates
Grace_walmart3877 <- data.frame(rbind(GRACE, walmart3877))
#Create Route information
GRACE_walmart3877.route <- osrmRoute(loc = Grace_walmart3877)
#Create Route information
GRACE_walmart3877.route <- osrmRoute(dst = walmart3877, loc = GRACE)
#Create Route information
GRACE_walmart3877.route <- osrmRoute(dst = walmart3877, src = GRACE)
View(GRACE)
